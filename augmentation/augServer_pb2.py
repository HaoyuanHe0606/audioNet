# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: augServer.proto

from google.protobuf import descriptor_pb2
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import reflection as _reflection
from google.protobuf import message as _message
from google.protobuf import descriptor as _descriptor
import sys
_b = sys.version_info[0] < 3 and (
    lambda x: x) or (lambda x: x.encode('latin1'))
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


DESCRIPTOR = _descriptor.FileDescriptor(
    name='augServer.proto',
    package='augServer',
    syntax='proto3',
    serialized_pb=_b('\n\x0f\x61ugServer.proto\x12\taugServer\"\x07\n\x05\x45mpty\"<\n\tBatchData\x12\x12\n\nbatch_size\x18\x01 \x01(\x05\x12\x0c\n\x04\x64\x61ta\x18\x02 \x01(\x0c\x12\r\n\x05label\x18\x03 \x01(\x0c\"f\n\x06Status\x12\x0f\n\x07running\x18\x01 \x01(\x08\x12%\n\x05train\x18\x02 \x01(\x0b\x32\x16.augServer.QueueReport\x12$\n\x04test\x18\x03 \x01(\x0b\x32\x16.augServer.QueueReport\"b\n\x0bQueueReport\x12\x13\n\x0bthread_size\x18\x02 \x01(\x05\x12\x16\n\x0equeue_capacity\x18\x03 \x01(\x05\x12\x12\n\nqueue_size\x18\x04 \x01(\x05\x12\x12\n\nbatch_size\x18\x05 \x01(\x05\"C\n\x0f\x43ontrolResponse\x12!\n\x06status\x18\x01 \x01(\x0b\x32\x11.augServer.Status\x12\r\n\x05\x65rror\x18\x02 \x01(\t\"\x8d\x01\n\rControlSignal\x12-\n\x04sign\x18\x01 \x01(\x0e\x32\x1f.augServer.ControlSignal.Signal\x12!\n\x06status\x18\x02 \x01(\x0b\x32\x11.augServer.Status\"*\n\x06Signal\x12\x0b\n\x07SETTING\x10\x00\x12\t\n\x05START\x10\x01\x12\x08\n\x04STOP\x10\x02\x32\xf8\x01\n\x0c\x44\x61taProvider\x12\x38\n\x0cGetTrainData\x12\x10.augServer.Empty\x1a\x14.augServer.BatchData\"\x00\x12\x37\n\x0bGetTestData\x12\x10.augServer.Empty\x1a\x14.augServer.BatchData\"\x00\x12\x32\n\tGetStatus\x12\x10.augServer.Empty\x1a\x11.augServer.Status\"\x00\x12\x41\n\x07\x43ontrol\x12\x18.augServer.ControlSignal\x1a\x1a.augServer.ControlResponse\"\x00\x62\x06proto3')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)


_CONTROLSIGNAL_SIGNAL = _descriptor.EnumDescriptor(
    name='Signal',
    full_name='augServer.ControlSignal.Signal',
    filename=None,
    file=DESCRIPTOR,
    values=[
        _descriptor.EnumValueDescriptor(
            name='SETTING', index=0, number=0,
            options=None,
            type=None),
        _descriptor.EnumValueDescriptor(
            name='START', index=1, number=1,
            options=None,
            type=None),
        _descriptor.EnumValueDescriptor(
            name='STOP', index=2, number=2,
            options=None,
            type=None),
    ],
    containing_type=None,
    options=None,
    serialized_start=474,
    serialized_end=516,
)
_sym_db.RegisterEnumDescriptor(_CONTROLSIGNAL_SIGNAL)


_EMPTY = _descriptor.Descriptor(
    name='Empty',
    full_name='augServer.Empty',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=None,
    is_extendable=False,
    syntax='proto3',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=30,
    serialized_end=37,
)


_BATCHDATA = _descriptor.Descriptor(
    name='BatchData',
    full_name='augServer.BatchData',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name='batch_size', full_name='augServer.BatchData.batch_size', index=0,
            number=1, type=5, cpp_type=1, label=1,
            has_default_value=False, default_value=0,
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
        _descriptor.FieldDescriptor(
            name='data', full_name='augServer.BatchData.data', index=1,
            number=2, type=12, cpp_type=9, label=1,
            has_default_value=False, default_value=_b(""),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
        _descriptor.FieldDescriptor(
            name='label', full_name='augServer.BatchData.label', index=2,
            number=3, type=12, cpp_type=9, label=1,
            has_default_value=False, default_value=_b(""),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=None,
    is_extendable=False,
    syntax='proto3',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=39,
    serialized_end=99,
)


_STATUS = _descriptor.Descriptor(
    name='Status',
    full_name='augServer.Status',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name='running', full_name='augServer.Status.running', index=0,
            number=1, type=8, cpp_type=7, label=1,
            has_default_value=False, default_value=False,
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
        _descriptor.FieldDescriptor(
            name='train', full_name='augServer.Status.train', index=1,
            number=2, type=11, cpp_type=10, label=1,
            has_default_value=False, default_value=None,
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
        _descriptor.FieldDescriptor(
            name='test', full_name='augServer.Status.test', index=2,
            number=3, type=11, cpp_type=10, label=1,
            has_default_value=False, default_value=None,
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=None,
    is_extendable=False,
    syntax='proto3',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=101,
    serialized_end=203,
)


_QUEUEREPORT = _descriptor.Descriptor(
    name='QueueReport',
    full_name='augServer.QueueReport',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name='thread_size', full_name='augServer.QueueReport.thread_size', index=0,
            number=2, type=5, cpp_type=1, label=1,
            has_default_value=False, default_value=0,
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
        _descriptor.FieldDescriptor(
            name='queue_capacity', full_name='augServer.QueueReport.queue_capacity', index=1,
            number=3, type=5, cpp_type=1, label=1,
            has_default_value=False, default_value=0,
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
        _descriptor.FieldDescriptor(
            name='queue_size', full_name='augServer.QueueReport.queue_size', index=2,
            number=4, type=5, cpp_type=1, label=1,
            has_default_value=False, default_value=0,
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
        _descriptor.FieldDescriptor(
            name='batch_size', full_name='augServer.QueueReport.batch_size', index=3,
            number=5, type=5, cpp_type=1, label=1,
            has_default_value=False, default_value=0,
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=None,
    is_extendable=False,
    syntax='proto3',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=205,
    serialized_end=303,
)


_CONTROLRESPONSE = _descriptor.Descriptor(
    name='ControlResponse',
    full_name='augServer.ControlResponse',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name='status', full_name='augServer.ControlResponse.status', index=0,
            number=1, type=11, cpp_type=10, label=1,
            has_default_value=False, default_value=None,
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
        _descriptor.FieldDescriptor(
            name='error', full_name='augServer.ControlResponse.error', index=1,
            number=2, type=9, cpp_type=9, label=1,
            has_default_value=False, default_value=_b("").decode('utf-8'),
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
    ],
    options=None,
    is_extendable=False,
    syntax='proto3',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=305,
    serialized_end=372,
)


_CONTROLSIGNAL = _descriptor.Descriptor(
    name='ControlSignal',
    full_name='augServer.ControlSignal',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name='sign', full_name='augServer.ControlSignal.sign', index=0,
            number=1, type=14, cpp_type=8, label=1,
            has_default_value=False, default_value=0,
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
        _descriptor.FieldDescriptor(
            name='status', full_name='augServer.ControlSignal.status', index=1,
            number=2, type=11, cpp_type=10, label=1,
            has_default_value=False, default_value=None,
            message_type=None, enum_type=None, containing_type=None,
            is_extension=False, extension_scope=None,
            options=None),
    ],
    extensions=[
    ],
    nested_types=[],
    enum_types=[
        _CONTROLSIGNAL_SIGNAL,
    ],
    options=None,
    is_extendable=False,
    syntax='proto3',
    extension_ranges=[],
    oneofs=[
    ],
    serialized_start=375,
    serialized_end=516,
)

_STATUS.fields_by_name['train'].message_type = _QUEUEREPORT
_STATUS.fields_by_name['test'].message_type = _QUEUEREPORT
_CONTROLRESPONSE.fields_by_name['status'].message_type = _STATUS
_CONTROLSIGNAL.fields_by_name['sign'].enum_type = _CONTROLSIGNAL_SIGNAL
_CONTROLSIGNAL.fields_by_name['status'].message_type = _STATUS
_CONTROLSIGNAL_SIGNAL.containing_type = _CONTROLSIGNAL
DESCRIPTOR.message_types_by_name['Empty'] = _EMPTY
DESCRIPTOR.message_types_by_name['BatchData'] = _BATCHDATA
DESCRIPTOR.message_types_by_name['Status'] = _STATUS
DESCRIPTOR.message_types_by_name['QueueReport'] = _QUEUEREPORT
DESCRIPTOR.message_types_by_name['ControlResponse'] = _CONTROLRESPONSE
DESCRIPTOR.message_types_by_name['ControlSignal'] = _CONTROLSIGNAL

Empty = _reflection.GeneratedProtocolMessageType('Empty', (_message.Message,), dict(
    DESCRIPTOR=_EMPTY,
    __module__='augServer_pb2'
    # @@protoc_insertion_point(class_scope:augServer.Empty)
))
_sym_db.RegisterMessage(Empty)

BatchData = _reflection.GeneratedProtocolMessageType('BatchData', (_message.Message,), dict(
    DESCRIPTOR=_BATCHDATA,
    __module__='augServer_pb2'
    # @@protoc_insertion_point(class_scope:augServer.BatchData)
))
_sym_db.RegisterMessage(BatchData)

Status = _reflection.GeneratedProtocolMessageType('Status', (_message.Message,), dict(
    DESCRIPTOR=_STATUS,
    __module__='augServer_pb2'
    # @@protoc_insertion_point(class_scope:augServer.Status)
))
_sym_db.RegisterMessage(Status)

QueueReport = _reflection.GeneratedProtocolMessageType('QueueReport', (_message.Message,), dict(
    DESCRIPTOR=_QUEUEREPORT,
    __module__='augServer_pb2'
    # @@protoc_insertion_point(class_scope:augServer.QueueReport)
))
_sym_db.RegisterMessage(QueueReport)

ControlResponse = _reflection.GeneratedProtocolMessageType('ControlResponse', (_message.Message,), dict(
    DESCRIPTOR=_CONTROLRESPONSE,
    __module__='augServer_pb2'
    # @@protoc_insertion_point(class_scope:augServer.ControlResponse)
))
_sym_db.RegisterMessage(ControlResponse)

ControlSignal = _reflection.GeneratedProtocolMessageType('ControlSignal', (_message.Message,), dict(
    DESCRIPTOR=_CONTROLSIGNAL,
    __module__='augServer_pb2'
    # @@protoc_insertion_point(class_scope:augServer.ControlSignal)
))
_sym_db.RegisterMessage(ControlSignal)


try:
    # THESE ELEMENTS WILL BE DEPRECATED.
    # Please use the generated *_pb2_grpc.py files instead.
    import grpc
    from grpc.beta import implementations as beta_implementations
    from grpc.beta import interfaces as beta_interfaces
    from grpc.framework.common import cardinality
    from grpc.framework.interfaces.face import utilities as face_utilities

    class DataProviderStub(object):
        """python -m grpc_tools.protoc -I. --python_out=.  --grpc_python_out=. ./augServer.proto

        """

        def __init__(self, channel):
            """Constructor.

            Args:
              channel: A grpc.Channel.
            """
            self.GetTrainData = channel.unary_unary(
                '/augServer.DataProvider/GetTrainData',
                request_serializer=Empty.SerializeToString,
                response_deserializer=BatchData.FromString,
            )
            self.GetTestData = channel.unary_unary(
                '/augServer.DataProvider/GetTestData',
                request_serializer=Empty.SerializeToString,
                response_deserializer=BatchData.FromString,
            )
            self.GetStatus = channel.unary_unary(
                '/augServer.DataProvider/GetStatus',
                request_serializer=Empty.SerializeToString,
                response_deserializer=Status.FromString,
            )
            self.Control = channel.unary_unary(
                '/augServer.DataProvider/Control',
                request_serializer=ControlSignal.SerializeToString,
                response_deserializer=ControlResponse.FromString,
            )

    class DataProviderServicer(object):
        """python -m grpc_tools.protoc -I. --python_out=.  --grpc_python_out=. ./augServer.proto

        """

        def GetTrainData(self, request, context):
            context.set_code(grpc.StatusCode.UNIMPLEMENTED)
            context.set_details('Method not implemented!')
            raise NotImplementedError('Method not implemented!')

        def GetTestData(self, request, context):
            context.set_code(grpc.StatusCode.UNIMPLEMENTED)
            context.set_details('Method not implemented!')
            raise NotImplementedError('Method not implemented!')

        def GetStatus(self, request, context):
            context.set_code(grpc.StatusCode.UNIMPLEMENTED)
            context.set_details('Method not implemented!')
            raise NotImplementedError('Method not implemented!')

        def Control(self, request, context):
            context.set_code(grpc.StatusCode.UNIMPLEMENTED)
            context.set_details('Method not implemented!')
            raise NotImplementedError('Method not implemented!')

    def add_DataProviderServicer_to_server(servicer, server):
        rpc_method_handlers = {
            'GetTrainData': grpc.unary_unary_rpc_method_handler(
                servicer.GetTrainData,
                request_deserializer=Empty.FromString,
                response_serializer=BatchData.SerializeToString,
            ),
            'GetTestData': grpc.unary_unary_rpc_method_handler(
                servicer.GetTestData,
                request_deserializer=Empty.FromString,
                response_serializer=BatchData.SerializeToString,
            ),
            'GetStatus': grpc.unary_unary_rpc_method_handler(
                servicer.GetStatus,
                request_deserializer=Empty.FromString,
                response_serializer=Status.SerializeToString,
            ),
            'Control': grpc.unary_unary_rpc_method_handler(
                servicer.Control,
                request_deserializer=ControlSignal.FromString,
                response_serializer=ControlResponse.SerializeToString,
            ),
        }
        generic_handler = grpc.method_handlers_generic_handler(
            'augServer.DataProvider', rpc_method_handlers)
        server.add_generic_rpc_handlers((generic_handler,))

    class BetaDataProviderServicer(object):
        """The Beta API is deprecated for 0.15.0 and later.

        It is recommended to use the GA API (classes and functions in this
        file not marked beta) for all further purposes. This class was generated
        only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
        """python -m grpc_tools.protoc -I. --python_out=.  --grpc_python_out=. ./augServer.proto

    """

        def GetTrainData(self, request, context):
            context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)

        def GetTestData(self, request, context):
            context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)

        def GetStatus(self, request, context):
            context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)

        def Control(self, request, context):
            context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)

    class BetaDataProviderStub(object):
        """The Beta API is deprecated for 0.15.0 and later.

        It is recommended to use the GA API (classes and functions in this
        file not marked beta) for all further purposes. This class was generated
        only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
        """python -m grpc_tools.protoc -I. --python_out=.  --grpc_python_out=. ./augServer.proto

    """

        def GetTrainData(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
            raise NotImplementedError()
        GetTrainData.future = None

        def GetTestData(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
            raise NotImplementedError()
        GetTestData.future = None

        def GetStatus(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
            raise NotImplementedError()
        GetStatus.future = None

        def Control(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
            raise NotImplementedError()
        Control.future = None

    def beta_create_DataProvider_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
        """The Beta API is deprecated for 0.15.0 and later.

        It is recommended to use the GA API (classes and functions in this
        file not marked beta) for all further purposes. This function was
        generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
        request_deserializers = {
            ('augServer.DataProvider', 'Control'): ControlSignal.FromString,
            ('augServer.DataProvider', 'GetStatus'): Empty.FromString,
            ('augServer.DataProvider', 'GetTestData'): Empty.FromString,
            ('augServer.DataProvider', 'GetTrainData'): Empty.FromString,
        }
        response_serializers = {
            ('augServer.DataProvider', 'Control'): ControlResponse.SerializeToString,
            ('augServer.DataProvider', 'GetStatus'): Status.SerializeToString,
            ('augServer.DataProvider', 'GetTestData'): BatchData.SerializeToString,
            ('augServer.DataProvider', 'GetTrainData'): BatchData.SerializeToString,
        }
        method_implementations = {
            ('augServer.DataProvider', 'Control'): face_utilities.unary_unary_inline(servicer.Control),
            ('augServer.DataProvider', 'GetStatus'): face_utilities.unary_unary_inline(servicer.GetStatus),
            ('augServer.DataProvider', 'GetTestData'): face_utilities.unary_unary_inline(servicer.GetTestData),
            ('augServer.DataProvider', 'GetTrainData'): face_utilities.unary_unary_inline(servicer.GetTrainData),
        }
        server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers,
                                                             thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
        return beta_implementations.server(method_implementations, options=server_options)

    def beta_create_DataProvider_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
        """The Beta API is deprecated for 0.15.0 and later.

        It is recommended to use the GA API (classes and functions in this
        file not marked beta) for all further purposes. This function was
        generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
        request_serializers = {
            ('augServer.DataProvider', 'Control'): ControlSignal.SerializeToString,
            ('augServer.DataProvider', 'GetStatus'): Empty.SerializeToString,
            ('augServer.DataProvider', 'GetTestData'): Empty.SerializeToString,
            ('augServer.DataProvider', 'GetTrainData'): Empty.SerializeToString,
        }
        response_deserializers = {
            ('augServer.DataProvider', 'Control'): ControlResponse.FromString,
            ('augServer.DataProvider', 'GetStatus'): Status.FromString,
            ('augServer.DataProvider', 'GetTestData'): BatchData.FromString,
            ('augServer.DataProvider', 'GetTrainData'): BatchData.FromString,
        }
        cardinalities = {
            'Control': cardinality.Cardinality.UNARY_UNARY,
            'GetStatus': cardinality.Cardinality.UNARY_UNARY,
            'GetTestData': cardinality.Cardinality.UNARY_UNARY,
            'GetTrainData': cardinality.Cardinality.UNARY_UNARY,
        }
        stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers,
                                                         response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
        return beta_implementations.dynamic_stub(channel, 'augServer.DataProvider', cardinalities, options=stub_options)
except ImportError:
    pass
# @@protoc_insertion_point(module_scope)
